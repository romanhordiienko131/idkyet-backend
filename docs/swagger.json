{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "AquaTrack",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of AquaTrack app"
  },
  "servers": [
    {
      "url": "https://aquatrack-01.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Water",
      "description": "Operations with water."
    },
    {
      "name": "Users",
      "description": "Operations with users."
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "registerUser",
        "summary": "User Registration",
        "description": "Registers a new user by providing their email and password. On successful registration, a 201 Created status is returned along with the user data. If the email is already in use, a 409 Conflict error is returned.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's email",
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email address is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "ConflictError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email in use"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "loginUser",
        "summary": "User Authentication",
        "description": "Authenticates a user by validating their email and password. On successful authentication, a session cookie and a refresh token cookie are set, and an access token is returned. If the credentials are incorrect, a 401 Unauthorized error is returned.",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "john.doe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookie",
                "schema": {
                  "type": "string",
                  "example": "sessionId=j%3A%226777d431ab6c2bc095d944a5%22; Path=/; Expires=Sun, 02 Feb 2025 12:12:33 GMT; HttpOnly"
                }
              },
              "\u0000Set-Cookie": {
                "description": "Refresh token cookie",
                "schema": {
                  "type": "string",
                  "example": "refreshToken=ijKGicDPD8fz2egibIhkNGQkj2ziaQXIURK8jEyA; Path=/; Expires=Sun, 02 Feb 2025 12:12:33 GMT; HttpOnly"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in a user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "user"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "Qu469Tkd8Y2mAPIBo96le7ODiupGgjYI+2D2FBOO"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "UnauthorizedError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Email or password is incorrect"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "logoutUser",
        "summary": "User Logout",
        "description": "Logs out the authenticated user by invalidating their bearer token. A 204 No Content response is returned upon successful logout. If the token is invalid or expired, a 401 Unauthorized error is returned.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out the user"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "refreshSession",
        "summary": "Refresh User Session",
        "description": "Refreshes the user's session by validating the provided session and refresh token cookies. If valid, a new access token is returned. A 200 status code indicates a successful refresh, while a 401 status code indicates that the session was not found or the session token has expired.",
        "security": [],
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "description": "Session cookie",
            "schema": {
              "type": "string",
              "example": "sessionId=j%3A%226777d431ab6c2bc095d944a5%22; Path=/; Expires=Sun, 02 Feb 2025 12:12:33 GMT; HttpOnly"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "description": "Refresh token cookie",
            "schema": {
              "type": "string",
              "example": "refreshToken=ijKGicDPD8fz2egibIhkNGQkj2ziaQXIURK8jEyA; Path=/; Expires=Sun, 02 Feb 2025 12:12:33 GMT; HttpOnly"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "Oyj/CCeSRSL0El8pzW9+uBkdB53mH/ZqHDjExU5y"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid session or expired token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "UnauthorizedError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "enum": [
                            "Session not found",
                            "Session token expired"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getCurrentUser",
        "summary": "Retrieve the Current User",
        "description": "Fetches information about the currently authenticated user. On success, a 200 status code is returned with user details; otherwise, a 401 status code indicates unauthorized access.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved user successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved the current user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/update": {
      "patch": {
        "tags": [
          "Users"
        ],
        "operationId": "updateUser",
        "summary": "Update User Account Information",
        "description": "Updates a user's account details, including name, gender, weight, active time in sports, and daily water intake. Returns a confirmation message and updated user data upon success, or a 401 Unauthorized error if access is denied.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "User's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "avatar": {
                    "description": "User's avatar",
                    "type": "string",
                    "format": "binary"
                  },
                  "gender": {
                    "description": "User's gender",
                    "type": "string",
                    "enum": [
                      "woman",
                      "man"
                    ],
                    "example": "man"
                  },
                  "weight": {
                    "description": "User's weight (in kilograms)",
                    "type": "number",
                    "example": 80
                  },
                  "activeTime": {
                    "description": "User's time of active participation in sports (in hours)",
                    "type": "number",
                    "example": 1
                  },
                  "dailyNorm": {
                    "description": "User's daily norm of water intake (in milliliters)",
                    "type": "number",
                    "example": 3000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "description": "User's id (automatically generated)",
                          "type": "string",
                          "example": "677eb7405c84945af390b81f"
                        },
                        "email": {
                          "description": "User's email",
                          "type": "string",
                          "example": "john.doe@example.com"
                        },
                        "name": {
                          "description": "Users' name",
                          "type": "string",
                          "example": "john Doe"
                        },
                        "gender": {
                          "description": "User's gender",
                          "type": "string",
                          "enum": [
                            "woman",
                            "man"
                          ],
                          "example": "man"
                        },
                        "weight": {
                          "description": "User's weight (in kilograms)",
                          "type": "number",
                          "example": 80
                        },
                        "activeTime": {
                          "description": "User's time of active participation in sports (in hours)",
                          "type": "number",
                          "example": 1
                        },
                        "dailyNorm": {
                          "description": "User's daily norm of water intake (in milliliters)",
                          "type": "number",
                          "example": 3000
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/users/count": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "getUsersCount",
        "summary": "Retrieve the Count of Registered Users",
        "description": "Retrieves the total count of registered users. On success, a 200 status code is returned with user count.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved users count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved user count!"
                    },
                    "data": {
                      "type": "number",
                      "example": 100
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Create a water consumption",
        "operationId": "createWater",
        "description": "Create a water consumption with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "date",
                  "volume",
                  "userId"
                ],
                "properties": {
                  "date": {
                    "description": "Date of creating a water consumption",
                    "type": "string",
                    "example": "2025-01-08T22:21"
                  },
                  "volume": {
                    "description": "Water consumption volume",
                    "type": "number",
                    "example": 50
                  },
                  "userId": {
                    "description": "Water consumption user id",
                    "type": "string",
                    "example": "677ef8ffd965e35fbbcc5121"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Water consumption created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a water consumption!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/{waterId}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update a water consumption",
        "operationId": "updateWater",
        "description": "Update a water consumption with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "waterId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "677ef8ffd965e35fbbcc5121"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "date": {
                    "description": "New date for water consumption",
                    "type": "string",
                    "example": "2025-01-08T22:21"
                  },
                  "volume": {
                    "description": "New volume of water",
                    "type": "number",
                    "example": 100
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Water consumption updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated water consumption!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete a water consumption",
        "operationId": "deleteWater",
        "description": "Delete a water consumption",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "waterId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "677ef8ffd965e35fbbcc5121"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Water consumption deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 204
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/day/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get a water consumption by day",
        "operationId": "getWaterByDay",
        "description": "Get a water consumption by day",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01-08"
            },
            "description": "The date in format YYYY-MM-DD"
          }
        ],
        "responses": {
          "200": {
            "description": "Get water consumption by day",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data",
                    "totalWaterPerDay",
                    "waterPercentage"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found a water consumption by day"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "example": {
                          "_id": "677ef8ffd965e35fbbcc5121",
                          "date": "2025-01-08T22:21",
                          "volume": 50,
                          "userId": "677ef8ffd965e35fbbcc5121"
                        }
                      }
                    },
                    "totalWaterPerDay": {
                      "type": "integer",
                      "example": 1500
                    },
                    "waterPercentage": {
                      "type": "number",
                      "example": 50
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not Found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water consumption by day not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/month/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get a water consumption by month",
        "operationId": "getWaterByMonth",
        "description": "Get a water consumption by month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2025-01"
            },
            "description": "The date in format YYYY-MM"
          }
        ],
        "responses": {
          "200": {
            "description": "Get water consumption by month",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found a water consumption by month"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "example": {
                          "date": "2025-01-08",
                          "waterPercentage": 50
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not Found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Water consumption by month not found"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "_id": {
            "description": "User's id (automatically generated)",
            "type": "string",
            "example": "677eb7405c84945af390b81f"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "john.doe@example.com"
          },
          "name": {
            "description": "Users' name",
            "type": "string",
            "example": "john.doe",
            "default": "Local part of email address"
          },
          "avatar": {
            "description": "Link to user's avatar",
            "type": "string",
            "example": "https://res.cloudinary.com/dxwxmlz4k/image/upload/v1736940725/oahu8xtkfimt793xz1ce.jpg"
          },
          "gender": {
            "description": "User's gender",
            "type": "string",
            "enum": [
              "woman",
              "man"
            ],
            "example": "woman",
            "default": "woman"
          },
          "weight": {
            "description": "User's weight (in kilograms)",
            "type": "number",
            "example": 0,
            "default": 0
          },
          "activeTime": {
            "description": "User's time of active participation in sports (in hours)",
            "type": "number",
            "example": 0,
            "default": 0
          },
          "dailyNorm": {
            "description": "User's daily norm of water intake (in milliliters)",
            "type": "number",
            "example": 1500,
            "default": 1500
          }
        }
      },
      "water": {
        "type": "object",
        "required": [
          "_id",
          "date",
          "volume",
          "userId"
        ],
        "properties": {
          "_id": {
            "description": "Backend-generated unique id",
            "type": "string",
            "example": "677ef8ffd965e35fbbcc5121"
          },
          "date": {
            "description": "Water consumption date. Must be in the format YYYY-MM-DDTHH:mm",
            "type": "string",
            "example": "2025-01-08T22:21"
          },
          "volume": {
            "description": "Volume of water consumed in ml. Should be minimum 50 and maximum 5000",
            "type": "number",
            "example": 50
          },
          "userId": {
            "description": "Water consumption user id",
            "type": "string",
            "example": "677ef8ffd965e35fbbcc5121"
          },
          "createdAt": {
            "description": "The date and time when the water consumption was created",
            "type": "string",
            "example": "2025-01-08T22:21:36Z"
          },
          "updatedAt": {
            "description": "The date and time when the water consumption information was last updated",
            "type": "string",
            "example": "2025-01-09T12:10:00Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequest"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Invalid or expired access token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Water consumption not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "InternalServerError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}